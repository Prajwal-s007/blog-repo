urls.py
======================

from django.contrib import admin
from django.conf.urls import url
from myApp import views
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^$',views.post_list_view),
    url(r'(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/(?P<post>[-\w]+)',views.post_detail_view,name='post_detail'),
    url(r'^(?P<id>\d+)/share',views.mail_send_view),
    url(r'^tag/(?P<tag_slug>[-\w]+)/$',views.post_list_view,name='post_list_by_tag_name')
]
==========================================
views.py

from django.shortcuts import render,get_object_or_404
from django.core.paginator import Paginator,PageNotAnInteger,EmptyPage
from myApp.forms import EmailSendForm,CommentForm
from myApp.models import Comment
from django.core.mail import send_mail
from taggit.models import Tag
from myApp.models import Post
def post_list_view(request,tag_slug=None):
    post_list=Post.objects.all()
    tag=None
    if tag_slug:
        tag=get_object_or_404(Tag,slug=tag_slug)#provided slug
        post_list=post_list.filter(tags__in=[tag])

    paginator=Paginator(post_list,2) #step1
    page_number=request.GET.get('page') #step2
    try:
       post_list=paginator.page(page_number) #step2
    except PageNotAnInteger:
       post_list=paginator.page(1) #step 3
    except EmptyPage:
      post_list=paginator.page(paginator.num_pages) #step 4
    d={'post_list':post_list,'tag':tag}
    return render(request,'myApp/post_list.html',d)
def post_detail_view(request,year,month,day,post):
    post=get_object_or_404(Post,slug=post,publish__year=year,publish__month=month,publish__day=day)
    comments=post.comments.filter(active=True)
    csubmit=False
    form=CommentForm()
    if request.method=='POST':
        form=CommentForm(request.POST)
        if form.is_valid():
            newcomment=form.save(commit=False)
            newcomment.post=post
            newcomment.save()
            csubmit=True
    d={'post':post,'form':form,'csubmit':csubmit,'comments':comments}
    return render(request,'myApp/post_detail.html',d)
def mail_send_view(request,id):
    post=get_object_or_404(Post,id=id,status='published')
    form=EmailSendForm()
    if request.method=='POST':
        form=EmailSendForm(request.POST)
        if form.is_valid():
            cd=form.cleaned_data
            post_url=request.build_absolute_uri(post.get_absolute_url())
            subject='{0}[{1}]recommends you to read {2}'.format(cd['name'],cd['email'],post.title)
            message="Read Post At \n {0}\n\n{1} comments \n {2}".format(post_url,cd['name'],cd['comments'])
            send_mail(subject,message,'mailt8513@gmail.com',[cd['to']])
    d={'post':post,'form':form}
    return render(request,'myApp/sharebymail.html',d)
============================================
models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.urls import reverse
from taggit.managers import TaggableManager
# Create your models here.
class CustomManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(status='published')
class Post(models.Model):
          tags=TaggableManager()
          STATUS_CHOICES=(('draft','Draft'),('published','Published'))
          title=models.CharField(max_length=256)
          slug=models.SlugField(max_length=264,unique_for_date='publish')
          author=models.ForeignKey(User,related_name='blog_posts',on_delete= models.CASCADE)
          body=models.TextField()
          publish=models.DateTimeField(default=timezone.now)
          created=models.DateTimeField(auto_now_add=True)
          updated=models.DateTimeField(auto_now=True)
          status= models.CharField(max_length=10,choices=STATUS_CHOICES,default='draft')
          objects=CustomManager()
          class Meta:
                ordering=('-publish',)
          def __str__(self):
              return self.title
          def get_absolute_url(self):
                return reverse('post_detail',args=[self.publish.year,self.publish.strftime('%m'),self.publish.strftime('%d'),self.slug])
class Comment(models.Model):
    post=models.ForeignKey(Post,related_name="comments",on_delete=models.CASCADE)
    name=models.CharField(max_length=50)
    email=models.EmailField()
    body=models.TextField()
    created=models.DateTimeField(auto_now_add=True)
    updated=models.DateTimeField(auto_now=True)
    active=models.BooleanField(default=True)
    class Meta:
        ordering=('created',)
    def __str__(self):
        return 'Commented by {0} on {}'.format(self.name,self.post)
============================================
admin.py

from django.contrib import admin
from myApp.models import Post,Comment
# Register your models here.
class PostAdmin(admin.ModelAdmin):
    l=['title','slug','author','body','publish','created','updated','status']
    prepopulated_fields={'slug':['title']}
    list_filter=['status','created','publish','author']
    search_fields=['title','body']
    raw_id_fields=('author',)
    ordering=['status','publish']
class CommentAdmin(admin.ModelAdmin):
    l=['post','email','body','created','updated','active']
    list_filter=['active','created','updated']
    search_fields=['name','email','body']

admin.site.register(Post,PostAdmin)
admin.site.register(Comment,CommentAdmin)

==================================================
forms.py
from django import forms
from myApp.models import Comment
class EmailSendForm(forms.Form):
    name=forms.CharField()
    email=forms.EmailField()
    to=forms.EmailField()
    comments=forms.CharField(required=False,widget=forms.Textarea)

class CommentForm(forms.ModelForm):
    class Meta:
        model=Comment
        fields=('name','email','body')
================================================
settings.py
"""
Django settings for blogProject project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR=os.path.join(BASE_DIR,'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'yk9bl$qmtwx5j-z#1c!$*wk-zcd_^9crbg7$*m=)i!yeiiai!d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myApp',
    'taggit'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

EMAIL_HOST='smtp.gmail.com' #smtp(simple mail transfer protocol) server host
EMAIL_PORT=587  #default val=25
EMAIL_HOST_USER='mailt8513@gmail.com'
EMAIL_HOST_PASSWORD='pentagon@12345'
EMAIL_USE_TLS=True  #Transport layer security
===============================================
templates/myApp
===================================
parent.html

<html>
{%load mytags%}
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <title>
            {%block title_block%}
            {%endblock%}
        </title>
    </head>
    <body>
        <div class="content" style="width:70%;float:left;background-color:a8aaad;height:300%;padding:0 0 0 30px">
              {%block content_block%}
              {%endblock%}
        </div>
        <div class="sidebar" style="width:30%;float:right;background-color:#c4c456;height:300%;padding:10px">
            <h2>Shreenath's Blog</h2>
            <h3>Total publictions
              <span style="color:red;font-size:80px">
              {%total_posts%}</span>
              <h3>Latest Posts</h3>
              {% show_latest_posts 2 %}
              <h3>Most commented post</h3>
              {%get_most_commented_posts as m%}
              <ol>
                {%for post in m%}
                <li><a href="{{post.get_absolute_url}}">{{post.title}}</a></li>
                {%endfor%}
              </ol>

            </h3>
        </div>
    </body>
</html>
=========================
latest_post.html
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <body>
    <ol>
    {%for post in latest_posts%}
    <li><a href="{{post.get_absolute_url}}">{{post.title}}</a></li>
    {%endfor%}
    </ol>
  </body>
</html>
========================
pagination.html

<!DOCTYPE html>
<html lang="en" dir="ltr">
  <body>
     <div class="paginator">
       {%if page.has_previous%}
       <a href="?page={{page.previous_page_number}}">Previous</a>&nbsp&nbsp
       {%endif%}
      <span>Page {{page.number}} of {{page.paginator.num_pages}}</span>&nbsp&nbsp
      {%if page.has_next%}
      <a href="?page={{page.next_page_number}}">Next</a> &nbsp  &nbsp
      {%endif%}
     </div>
  </body>
</html>
================================
post_detail.html

<html>
    {%extends 'myApp/parent.html'%}
    {%block title_block%}
      <h2>{{post.title}}</h2>
    {%endblock%}
    <body>
        {%block content_block%}
        <h1>{{post.title}}</h1>
        <p>Published on {{post.publish}} by {{post.author|title}}</p>
        {{post.body|linebreaks}} <br><br>
        <a href="/{{post.id}}/share" class='btn btn-lg btn-primary'>POST BY MAIL</a>

        {%with comments.count as comments_count%}
        <h2>{{comments_count}} Comment{{comments_count|pluralize}}</h2>
        {%endwith%}
        {%if comments%}
         {%for c in comments%}
         <p>Comment {{forloop.counter}} by {{c.name}}</p>
        <div>{{c.body|linebreaks}}</div>
        <hr>
        {%endfor%}
        {%else%}
         <p style="color:blue;font-size:30px;font-style:bold;border-bottom:1px red solid;">There are no comments</p>
        {%endif%}
         {%if csubmit%}
         <h2>Thank you..Your comment has been added successfully!!</h2>
         {%else%}
         <form  method="post">
           {{form.as_p}}
           {%csrf_token%}
           <input type="submit" class='btn btn-lg btn-primary' value="Submit">
         </form>
         {%endif%}
        {%endblock%}
    </body>
</html>
============================================
sharebymail.html
<html>
{%extends "myApp/parent.html"%}
  <body>
     {%block content_block%}
     <center>
     <h1 style="color:red"><u>Fill out the details</u></h1>
    <form  method="post">
      {{form.as_p}}
      {%csrf_token%}
      <input type="submit" class='btn btn-lg btn-primary' value="SendMail">
       </form>
      </center>
    {%endblock%}
  </body>
</html>
==========================================
myApp/templatetags/
1.create __init__.py(blank file)
mytags.py
from django import template
from myApp.models import Post
from django.db.models import Count
register=template.Library() #default template tag=total_posts
@register.simple_tag
def total_posts():
    return Post.objects.count()
@register.inclusion_tag('myApp/latest_post.html')
def show_latest_posts(count=3):
    latest_posts=Post.objects.order_by('-publish')[:count]
    return {'latest_posts':latest_posts}
@register.simple_tag
def get_most_commented_posts(count=2):
    return Post.objects.annotate(total_comments=Count('comments')).order_by('-total_comments')[:count]

===================================================
post_list.html

<html>
    {%extends 'myApp/parent.html'%}
    {%block title_block%}
      Prajwal's Blog
    {%endblock%}
    <body>
        {%block content_block%}
        <h1 style="color:#ff0000;font-size:350%;"><b>WELCOME TO PRAJWAL'S HOME BLOG</b></h1>
        {%if tag%}
        <h1>Post tagged with {{tag.name}}</h1>
        {%endif%}
        {%for post in post_list%}
        <a href="{{post.get_absolute_url}}"><h2><b>{{post.title}}</b></h2></a>
        <p>Tags:
          {%for t in post.tags.all%}
          <a href="{%url "post_list_by_tag_name" t.slug%}">{{t.name}}</a>
          {%endfor%}
        </p>
        <i><b>Published on {{post.publish}} by {{post.author|title}}</b></i>
        {{post.body|truncatewords:40|linebreaks}}
        {%endfor%}
        {%include 'myApp/pagination.html' with page=post_list%}
        {%endblock%}
    </body>

</html>
